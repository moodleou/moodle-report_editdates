{"version":3,"file":"datehelper.min.js","sources":["../src/datehelper.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module to help editing course dates\n *\n * @module     report_editdates/datehelper\n * @copyright  2022 Te Wānanga o Aotearoa\n */\n\nimport * as ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\nlet datetimeSelectors = {};\nlet startDate = {};\nlet endDate = new Date(\"December 31, 2099 23:59:59\");\nconst classOutOfRange = \"outofrange\";\n\n/**\n * Initialiser function.\n */\nexport const init = () => {\n    datetimeSelectors = document.querySelectorAll(\"div[data-fieldtype='date_time_selector']\");\n    let courseStart = datetimeSelectors.item(0);\n    let courseEnd = datetimeSelectors.item(1);\n    startDate = getDate(courseStart);\n    let optional = courseEnd.querySelector(\"input[type='checkbox']\");\n    if (optional.checked) {\n        endDate = getDate(courseEnd);\n    }\n\n    // Event Listeners.\n    courseStart.addEventListener(\"change\", startDateChanged);\n    courseEnd.addEventListener(\"change\", endDateChanged);\n    // Activity module date time selector events.\n    for (const date of datetimeSelectors.entries()) {\n        if (date[0] > 1) {\n            date[1].addEventListener(\"change\", modDateChanged);\n        }\n    }\n    // Date picker event.\n    M.form.dateselector.calendar.on('selectionChange', updateDates, false);\n};\n\n/**\n * A date has been changed using the date selector calendar.\n */\nconst updateDates = () => {\n    let datepicker = M.form.dateselector.currentowner;\n    if (null === datepicker) {\n        return;\n    }\n    // Todo: is there a better way to ensure this runs after the selects have been updated?\n    setTimeout(\n        function() {\n            let el = datepicker.calendarimage.getDOMNode();\n            let datetimeSelector = el.closest(\"div[data-fieldtype='date_time_selector']\");\n            if (datetimeSelector === datetimeSelectors.item(0)) {\n                startDateChanged();\n            } else if (datetimeSelector === datetimeSelectors.item(1)) {\n                endDateChanged();\n            } else {\n                checkDateRange(datetimeSelector);\n            }\n        },\n        100\n    );\n};\n\n/**\n * The start date of the course has been changed.\n * Adjust all other dates accordingly if desired.\n * @returns {*}\n */\nconst startDateChanged = () => {\n    let datesOutOfRange = 0;\n    startDate = getDate(datetimeSelectors.item(0));\n    for (const date of datetimeSelectors.entries()) {\n        if (date[0] > 1) {\n            let optional = date[1].querySelector(\"input[type='checkbox']\");\n            if (optional === null || optional.checked) {\n                datesOutOfRange += checkDateRange(date[1]);\n            }\n        }\n    }\n\n    if (datesOutOfRange > 0) {\n        return ModalFactory.create({\n            type: ModalFactory.types.DEFAULT,\n            title: getString('datesoutofrange_title', 'report_editdates'),\n            body: getString('datesoutofrange_body', 'report_editdates')\n        })\n            .then(modal => {\n                modal.show();\n                return modal;\n            });\n    }\n\n    return false;\n};\n\n/**\n * The end date of the course has been changed.\n * Check if any activity module dates are after this date.\n * @returns {*}\n */\nconst endDateChanged = () => {\n    let datesOutOfRange = 0;\n    endDate = getDate(datetimeSelectors.item(1));\n    for (const date of datetimeSelectors.entries()) {\n        if (date[0] > 1) {\n            let optional = date[1].querySelector(\"input[type='checkbox']\");\n            if (optional === null || optional.checked) {\n                datesOutOfRange += checkDateRange(date[1]);\n            }\n        }\n    }\n\n    if (datesOutOfRange > 0) {\n        return ModalFactory.create({\n            type: ModalFactory.types.DEFAULT,\n            title: getString('datesoutofrange_title', 'report_editdates'),\n            body: getString('datesoutofrange_body', 'report_editdates')\n        })\n            .then(modal => {\n                modal.show();\n                return modal;\n            });\n    }\n};\n\n/**\n * An activity module date has been changed.\n * Check and warn if it is now after the course end date.\n * @param {Event} ev\n */\nconst modDateChanged = (ev) => {\n    // Check against course end date.\n    let container = ev.target.closest(\"div[data-fieldtype='date_time_selector']\");\n\n    checkDateRange(container);\n};\n\n/**\n * Get a Date object from the select DOM elements.\n * @param {HTMLElement} dateEl\n * @returns {Date}\n */\nconst getDate = (dateEl) => {\n    let year = dateEl.querySelector(\".fdate_time_selector > div:nth-child(3) select\");\n    let month = dateEl.querySelector(\".fdate_time_selector > div:nth-child(2) select\");\n    let day = dateEl.querySelector(\".fdate_time_selector > div:nth-child(1) select\");\n    let hour = dateEl.querySelector(\".fdate_time_selector > div:nth-child(4) select\");\n    let minute = dateEl.querySelector(\".fdate_time_selector > div:nth-child(5) select\");\n    return new Date(\n        year.options[year.selectedIndex].value,\n        month.options[month.selectedIndex].value - 1,\n        day.options[day.selectedIndex].value,\n        hour.options[hour.selectedIndex].value,\n        minute.options[minute.selectedIndex].value,\n    );\n};\n\n/**\n * Compare the date with the course end date. Toggle CSS class of element.\n * @param {HTMLElement} el\n * @returns {boolean}\n */\nconst checkDateRange = (el) => {\n    let outOfRange = false;\n    let modDate = getDate(el);\n    if (modDate > endDate || modDate < startDate) {\n        el.parentNode.classList.add(classOutOfRange);\n        for (const input of el.querySelectorAll(\".form-group\").values()) {\n            input.classList.add(classOutOfRange);\n        }\n        outOfRange = true;\n    } else {\n        el.parentNode.classList.remove(classOutOfRange);\n        for (const input of el.querySelectorAll(\".form-group\").values()) {\n            input.classList.remove(classOutOfRange);\n        }\n    }\n    return outOfRange;\n};\n"],"names":["datetimeSelectors","startDate","endDate","Date","document","querySelectorAll","courseStart","item","courseEnd","getDate","querySelector","checked","addEventListener","startDateChanged","endDateChanged","date","entries","modDateChanged","M","form","dateselector","calendar","on","updateDates","datepicker","currentowner","setTimeout","datetimeSelector","calendarimage","getDOMNode","closest","checkDateRange","datesOutOfRange","optional","ModalFactory","create","type","types","DEFAULT","title","body","then","modal","show","ev","container","target","dateEl","year","month","day","hour","minute","options","selectedIndex","value","el","outOfRange","modDate","parentNode","classList","add","input","values","remove"],"mappings":"moCAyBIA,kBAAoB,GACpBC,UAAY,GACZC,QAAU,IAAIC,KAAK,4CAMH,KAChBH,kBAAoBI,SAASC,iBAAiB,gDAC1CC,YAAcN,kBAAkBO,KAAK,GACrCC,UAAYR,kBAAkBO,KAAK,GACvCN,UAAYQ,QAAQH,aACLE,UAAUE,cAAc,0BAC1BC,UACTT,QAAUO,QAAQD,YAItBF,YAAYM,iBAAiB,SAAUC,kBACvCL,UAAUI,iBAAiB,SAAUE,oBAEhC,MAAMC,QAAQf,kBAAkBgB,UAC7BD,KAAK,GAAK,GACVA,KAAK,GAAGH,iBAAiB,SAAUK,gBAI3CC,EAAEC,KAAKC,aAAaC,SAASC,GAAG,kBAAmBC,aAAa,UAM9DA,YAAc,SACZC,WAAaN,EAAEC,KAAKC,aAAaK,aACjC,OAASD,YAIbE,YACI,eAEQC,iBADKH,WAAWI,cAAcC,aACRC,QAAQ,4CAC9BH,mBAAqB3B,kBAAkBO,KAAK,GAC5CM,mBACOc,mBAAqB3B,kBAAkBO,KAAK,GACnDO,iBAEAiB,eAAeJ,oBAGvB,MASFd,iBAAmB,SACjBmB,gBAAkB,EACtB/B,UAAYQ,QAAQT,kBAAkBO,KAAK,QACtC,MAAMQ,QAAQf,kBAAkBgB,aAC7BD,KAAK,GAAK,EAAG,KACTkB,SAAWlB,KAAK,GAAGL,cAAc,2BACpB,OAAbuB,UAAqBA,SAAStB,WAC9BqB,iBAAmBD,eAAehB,KAAK,YAK/CiB,gBAAkB,GACXE,aAAaC,OAAO,CACvBC,KAAMF,aAAaG,MAAMC,QACzBC,OAAO,mBAAU,wBAAyB,oBAC1CC,MAAM,mBAAU,uBAAwB,sBAEvCC,MAAKC,QACFA,MAAMC,OACCD,UAYjB5B,eAAiB,SACfkB,gBAAkB,EACtB9B,QAAUO,QAAQT,kBAAkBO,KAAK,QACpC,MAAMQ,QAAQf,kBAAkBgB,aAC7BD,KAAK,GAAK,EAAG,KACTkB,SAAWlB,KAAK,GAAGL,cAAc,2BACpB,OAAbuB,UAAqBA,SAAStB,WAC9BqB,iBAAmBD,eAAehB,KAAK,QAK/CiB,gBAAkB,SACXE,aAAaC,OAAO,CACvBC,KAAMF,aAAaG,MAAMC,QACzBC,OAAO,mBAAU,wBAAyB,oBAC1CC,MAAM,mBAAU,uBAAwB,sBAEvCC,MAAKC,QACFA,MAAMC,OACCD,UAUjBzB,eAAkB2B,SAEhBC,UAAYD,GAAGE,OAAOhB,QAAQ,4CAElCC,eAAec,YAQbpC,QAAWsC,aACTC,KAAOD,OAAOrC,cAAc,kDAC5BuC,MAAQF,OAAOrC,cAAc,kDAC7BwC,IAAMH,OAAOrC,cAAc,kDAC3ByC,KAAOJ,OAAOrC,cAAc,kDAC5B0C,OAASL,OAAOrC,cAAc,yDAC3B,IAAIP,KACP6C,KAAKK,QAAQL,KAAKM,eAAeC,MACjCN,MAAMI,QAAQJ,MAAMK,eAAeC,MAAQ,EAC3CL,IAAIG,QAAQH,IAAII,eAAeC,MAC/BJ,KAAKE,QAAQF,KAAKG,eAAeC,MACjCH,OAAOC,QAAQD,OAAOE,eAAeC,QASvCxB,eAAkByB,SAChBC,YAAa,EACbC,QAAUjD,QAAQ+C,OAClBE,QAAUxD,SAAWwD,QAAUzD,UAAW,CAC1CuD,GAAGG,WAAWC,UAAUC,IA5JR,kBA6JX,MAAMC,SAASN,GAAGnD,iBAAiB,eAAe0D,SACnDD,MAAMF,UAAUC,IA9JJ,cAgKhBJ,YAAa,MACV,CACHD,GAAGG,WAAWC,UAAUI,OAlKR,kBAmKX,MAAMF,SAASN,GAAGnD,iBAAiB,eAAe0D,SACnDD,MAAMF,UAAUI,OApKJ,qBAuKbP"}