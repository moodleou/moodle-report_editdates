{"version":3,"file":"datehelper.min.js","sources":["../src/datehelper.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module to help editing course dates\n *\n * @module     report_editdates/datehelper\n * @copyright  2022 Te Wānanga o Aotearoa\n */\n\nimport * as ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\nlet datetimeSelectors = {};\nlet endDate = {};\nconst classEnd = \"afterend\";\n\n/**\n * Initialiser function.\n */\nexport const init = () => {\n    datetimeSelectors = document.querySelectorAll(\"div[data-fieldtype='date_time_selector']\");\n    let courseEnd = datetimeSelectors.item(1);\n    endDate = getDate(courseEnd);\n\n    // Event Listeners.\n    courseEnd.addEventListener(\"change\", endDateChanged);\n    // Activity module date time selector events.\n    for (const date of datetimeSelectors.entries()) {\n        if (date[0] > 1) {\n            date[1].addEventListener(\"change\", modDateChanged);\n        }\n    }\n    // Date picker event.\n    M.form.dateselector.calendar.on('selectionChange', updateDates, false);\n};\n\n/**\n * A date has been changed using the date selector calendar.\n */\nconst updateDates = () => {\n    let datepicker = M.form.dateselector.currentowner;\n    if (null === datepicker) {\n        return;\n    }\n    // Todo: is there a better way to ensure this runs after the selects have been updated?\n    setTimeout(\n        function() {\n            let el = datepicker.calendarimage.getDOMNode();\n            let datetimeSelector = el.closest(\"div[data-fieldtype='date_time_selector']\");\n            if (datetimeSelector === datetimeSelectors.item(1)) {\n                endDateChanged();\n            } else {\n                checkEndDate(datetimeSelector);\n            }\n        },\n        100\n    );\n};\n\n/**\n * The end date of the course has been changed.\n * Check if any activity module dates are after this date.\n * @returns {*}\n */\nconst endDateChanged = () => {\n    let datesPastEnd = 0;\n    endDate = getDate(datetimeSelectors.item(1));\n    for (const date of datetimeSelectors.entries()) {\n        if (date[0] > 1) {\n            let optional = date[1].querySelector(\"input[type='checkbox']\");\n            if (optional === null || optional.checked) {\n                datesPastEnd += checkEndDate(date[1]);\n            }\n        }\n    }\n\n    if (datesPastEnd > 0) {\n        return ModalFactory.create({\n            type: ModalFactory.types.DEFAULT,\n            title: getString('datesafterend_title', 'report_editdates'),\n            body: getString('datesafterend_body', 'report_editdates')\n        })\n            .then(modal => {\n                modal.show();\n                return modal;\n            });\n    }\n};\n\n/**\n * An activity module date has been changed.\n * Check and warn if it is now after the course end date.\n * @param {Event} ev\n */\nconst modDateChanged = (ev) => {\n    // Check against course end date.\n    let container = ev.target.closest(\"div[data-fieldtype='date_time_selector']\");\n\n    checkEndDate(container);\n};\n\n/**\n * Get a Date object from the select DOM elements.\n * @param {HTMLElement} dateEl\n * @returns {Date}\n */\nconst getDate = (dateEl) => {\n    let year = dateEl.querySelector(\".fdate_time_selector > div:nth-child(3) select\");\n    let month = dateEl.querySelector(\".fdate_time_selector > div:nth-child(2) select\");\n    let day = dateEl.querySelector(\".fdate_time_selector > div:nth-child(1) select\");\n    let hour = dateEl.querySelector(\".fdate_time_selector > div:nth-child(4) select\");\n    let minute = dateEl.querySelector(\".fdate_time_selector > div:nth-child(5) select\");\n    return new Date(\n        year.options[year.selectedIndex].value,\n        month.options[month.selectedIndex].value - 1,\n        day.options[day.selectedIndex].value,\n        hour.options[hour.selectedIndex].value,\n        minute.options[minute.selectedIndex].value,\n    );\n};\n\n/**\n * Compare the date with the course end date. Toggle CSS class of element.\n * @param {HTMLElement} el\n * @returns {boolean}\n */\nconst checkEndDate = (el) => {\n    let afterEndDate = false;\n    if (getDate(el) > endDate) {\n        el.parentNode.classList.add(classEnd);\n        for (const input of el.querySelectorAll(\".form-group\").values()) {\n            input.classList.add(classEnd);\n        }\n        afterEndDate = true;\n    } else {\n        el.parentNode.classList.remove(classEnd);\n        for (const input of el.querySelectorAll(\".form-group\").values()) {\n            input.classList.remove(classEnd);\n        }\n    }\n    return afterEndDate;\n};\n"],"names":["datetimeSelectors","endDate","document","querySelectorAll","courseEnd","item","getDate","addEventListener","endDateChanged","date","entries","modDateChanged","M","form","dateselector","calendar","on","updateDates","datepicker","currentowner","setTimeout","datetimeSelector","calendarimage","getDOMNode","closest","checkEndDate","datesPastEnd","optional","querySelector","checked","ModalFactory","create","type","types","DEFAULT","title","body","then","modal","show","ev","container","target","dateEl","year","month","day","hour","minute","Date","options","selectedIndex","value","el","afterEndDate","parentNode","classList","add","input","values","remove"],"mappings":"moCAyBIA,kBAAoB,GACpBC,QAAU,iBAMM,KAChBD,kBAAoBE,SAASC,iBAAiB,gDAC1CC,UAAYJ,kBAAkBK,KAAK,GACvCJ,QAAUK,QAAQF,WAGlBA,UAAUG,iBAAiB,SAAUC,oBAEhC,MAAMC,QAAQT,kBAAkBU,UAC7BD,KAAK,GAAK,GACVA,KAAK,GAAGF,iBAAiB,SAAUI,gBAI3CC,EAAEC,KAAKC,aAAaC,SAASC,GAAG,kBAAmBC,aAAa,UAM9DA,YAAc,SACZC,WAAaN,EAAEC,KAAKC,aAAaK,aACjC,OAASD,YAIbE,YACI,eAEQC,iBADKH,WAAWI,cAAcC,aACRC,QAAQ,4CAC9BH,mBAAqBrB,kBAAkBK,KAAK,GAC5CG,iBAEAiB,aAAaJ,oBAGrB,MASFb,eAAiB,SACfkB,aAAe,EACnBzB,QAAUK,QAAQN,kBAAkBK,KAAK,QACpC,MAAMI,QAAQT,kBAAkBU,aAC7BD,KAAK,GAAK,EAAG,KACTkB,SAAWlB,KAAK,GAAGmB,cAAc,2BACpB,OAAbD,UAAqBA,SAASE,WAC9BH,cAAgBD,aAAahB,KAAK,QAK1CiB,aAAe,SACRI,aAAaC,OAAO,CACvBC,KAAMF,aAAaG,MAAMC,QACzBC,OAAO,mBAAU,sBAAuB,oBACxCC,MAAM,mBAAU,qBAAsB,sBAErCC,MAAKC,QACFA,MAAMC,OACCD,UAUjB3B,eAAkB6B,SAEhBC,UAAYD,GAAGE,OAAOlB,QAAQ,4CAElCC,aAAagB,YAQXnC,QAAWqC,aACTC,KAAOD,OAAOf,cAAc,kDAC5BiB,MAAQF,OAAOf,cAAc,kDAC7BkB,IAAMH,OAAOf,cAAc,kDAC3BmB,KAAOJ,OAAOf,cAAc,kDAC5BoB,OAASL,OAAOf,cAAc,yDAC3B,IAAIqB,KACPL,KAAKM,QAAQN,KAAKO,eAAeC,MACjCP,MAAMK,QAAQL,MAAMM,eAAeC,MAAQ,EAC3CN,IAAII,QAAQJ,IAAIK,eAAeC,MAC/BL,KAAKG,QAAQH,KAAKI,eAAeC,MACjCJ,OAAOE,QAAQF,OAAOG,eAAeC,QASvC3B,aAAgB4B,SACdC,cAAe,KACfhD,QAAQ+C,IAAMpD,QAAS,CACvBoD,GAAGE,WAAWC,UAAUC,IAnHf,gBAoHJ,MAAMC,SAASL,GAAGlD,iBAAiB,eAAewD,SACnDD,MAAMF,UAAUC,IArHX,YAuHTH,cAAe,MACZ,CACHD,GAAGE,WAAWC,UAAUI,OAzHf,gBA0HJ,MAAMF,SAASL,GAAGlD,iBAAiB,eAAewD,SACnDD,MAAMF,UAAUI,OA3HX,mBA8HNN"}